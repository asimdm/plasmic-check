// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: oEu39c8WZuPtSHP9YhujE1
// Component: 6bcOMrmLGau9wo
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: yksKzv0YlLUoYS/component
import Button from "../../Button"; // plasmic-import: VK-SGWzVbASePV/component
import CopyrightSocialLanguage from "../../CopyrightSocialLanguage"; // plasmic-import: S8dnZHJc9RXkuM/component
import { useScreenVariants as useScreenVariantsy07Ui0Yi7Kc10 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: Y-07UI0yi7kc10/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_full_commerce_storefront.module.css"; // plasmic-import: oEu39c8WZuPtSHP9YhujE1/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: 6bcOMrmLGau9wo/css
import EmailIcon from "./icons/PlasmicIcon__Email"; // plasmic-import: KQfqI_E6aguPaJ/icon
import DeliveryIcon from "./icons/PlasmicIcon__Delivery"; // plasmic-import: uqzuf5hfh4Vz21/icon
import EnterIcon from "./icons/PlasmicIcon__Enter"; // plasmic-import: srJ5fTC5qhyVZI/icon
import QuestionIcon from "./icons/PlasmicIcon__Question"; // plasmic-import: CJ23Xo0gM4jty0/icon

export const PlasmicFooter__VariantProps = new Array();

export const PlasmicFooter__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsy07Ui0Yi7Kc10()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__mdqYo)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__epoRc)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__loYEq
            )}
          >
            {"Subscribe"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___1HyNl
            )}
          >
            {
              "Sign up for exclusive offers, original stories, activism, events and more."
            }
          </div>
          <TextInput
            data-plasmic-name={"textInput"}
            data-plasmic-override={overrides.textInput}
            className={classNames("__wab_instance", sty.textInput)}
            onChange={(...eventArgs) => {
              p.generateStateOnChangeProp($state, ["textInput", "value"])(
                (e => e.target?.value).apply(null, eventArgs)
              );
            }}
            placeholder={"Email address..."}
            showStartIcon={true}
            startIcon={
              <EmailIcon
                className={classNames(projectcss.all, sty.svg__momJ0)}
                role={"img"}
              />
            }
            value={p.generateStateValueProp($state, ["textInput", "value"])}
          />

          <Button
            className={classNames("__wab_instance", sty.button__t7MWk)}
            colors={"black"}
          >
            {"Sign me up"}
          </Button>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ltxAh)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__z9RoS
            )}
          >
            {"Help"}
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox___3K3Qr)}
          >
            <Button
              showStartIcon={true}
              startIcon={
                <DeliveryIcon
                  className={classNames(projectcss.all, sty.svg__wlTkb)}
                  role={"img"}
                />
              }
            >
              {"Order status"}
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__fDElz)}
              showStartIcon={true}
              startIcon={
                <EnterIcon
                  className={classNames(projectcss.all, sty.svg__s1Ey)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oHlO5
                )}
              >
                {"Returns and exchanges"}
              </div>
            </Button>
            <Button
              className={classNames("__wab_instance", sty.button__m2Ugr)}
              showStartIcon={true}
              startIcon={
                <QuestionIcon
                  className={classNames(projectcss.all, sty.svg__psaJj)}
                  role={"img"}
                />
              }
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0YlrI
                )}
              >
                {"Help center"}
              </div>
            </Button>
          </p.Stack>
        </p.Stack>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__b80Ae)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__pPhpl
            )}
          >
            {"More info"}
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sZxzM)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sVlrK)}
            >
              <Button>{"Gift cards"}</Button>
              <Button
                className={classNames("__wab_instance", sty.button__aSc5Y)}
              >
                {"Find a store"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button___4LzHg)}
              >
                {"Careers"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__g7Qt5)}
              >
                {"Sitemap"}
              </Button>
            </p.Stack>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4Qn2G)}
            >
              <Button
                className={classNames("__wab_instance", sty.button___5DbVk)}
              >
                {"Group sales"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__a9Ko)}
              >
                {"Privacy policy"}
              </Button>
              <Button
                className={classNames("__wab_instance", sty.button__za5M)}
              >
                {"Contact us"}
              </Button>
            </p.Stack>
          </div>
        </p.Stack>
      </p.Stack>
      <CopyrightSocialLanguage
        data-plasmic-name={"copyrightSocialLanguage"}
        data-plasmic-override={overrides.copyrightSocialLanguage}
        className={classNames("__wab_instance", sty.copyrightSocialLanguage)}
      />
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "textInput", "copyrightSocialLanguage"],
  textInput: ["textInput"],
  copyrightSocialLanguage: ["copyrightSocialLanguage"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    textInput: makeNodeComponent("textInput"),
    copyrightSocialLanguage: makeNodeComponent("copyrightSocialLanguage"),
    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
